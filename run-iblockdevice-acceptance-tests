#!/bin/sh
set -ex

FLOCKER_ACCEPTANCE_NODE="172.16.255.210"
FLOCKER_ACCEPTANCE_CONTROL_NODE="${FLOCKER_ACCEPTANCE_NODE}"
FLOCKER_ACCEPTANCE_AGENT_NODE="${FLOCKER_ACCEPTANCE_NODE}"
REPO="${RANDOM}"
DISTRIBUTION="fedora-20"
BRANCH="iblockdevice-deployer-redux-FLOC-1502"
REPO_URL="http://build.clusterhq.com/results/omnibus/${BRANCH}/${DISTRIBUTION}"

VERSION=$(cd ~/Projects/flocker/develop/; ~/Environments/flocker/bin/python -c "import flocker, admin.release; print '-'.join(admin.release.make_rpm_version(flocker.__version__))")

REMOTE_PROVISIONING_SCRIPT_PATH="/tmp/run-api-tests.sh"

cat <<EOF > "${REMOTE_PROVISIONING_SCRIPT_PATH}"
set -ex

# Install repoquery and killall
yum install -y yum-utils psmisc python-virtualenv libffi-devel libssl-devel git

# Kill any lingering agent processes
killall flocker-dataset-agent 2>/dev/null || echo "NO RUNNING AGENTS FOUND" >&2
EOF


cat <<\EOF >> "${REMOTE_PROVISIONING_SCRIPT_PATH}"
# Unmount and remove lingering loopback devices
losetup --list --output back-file | grep "^/var/lib/flocker"| xargs --no-run-if-empty umount
losetup --list --output "name,back-file" | awk '/\/var\/lib\/flocker/ {print $1}' | xargs --no-run-if-empty losetup --detach
EOF

cat <<EOF >> "${REMOTE_PROVISIONING_SCRIPT_PATH}"
# Stop and disable flocker services (if enabled)
systemctl stop flocker-control-agent.socket || true
systemctl stop flocker-control-api.socket || true
systemctl stop flocker-control.service || true

systemctl disable flocker-control.service || true
systemctl disable flocker-control-agent.socket || true
systemctl disable flocker-control-api.socket || true

# Remove existing packages
yum remove -y clusterhq-python-flocker || true

# Remove control service persisted configuration (if exists)
rm -rf /var/lib/flocker/current_configuration.v1.json

pushd /flocker

if [ ! -e clusterhq-python-flocker-${VERSION}.x86_64.rpm ]; then
    #
    # Build new packages
    #
    if [ ! -d /tmp/build-flocker-package ]; then
        virtualenv /tmp/build-flocker-package
    fi

    /tmp/build-flocker-package/bin/pip install --quiet --upgrade pip
    /tmp/build-flocker-package/bin/pip install -e .[release]

    . /tmp/build-flocker-package/bin/activate
    python ./admin/build-package --distribution fedora-20 /flocker
fi

#
# Install them
#
rpm -i clusterhq-python-flocker-${VERSION}.x86_64.rpm
rpm -i clusterhq-flocker-node-${VERSION}.noarch.rpm
popd

# # Find latest packages for this branch and install them
# repoquery --location --repoid "${REPO}" --repofrompath "${REPO},${REPO_URL}" '*' | \
#     xargs yum install -y

# Reload systemd configuration
systemctl daemon-reload

# Enable flocker-control and its sockets
# http://doc-dev.clusterhq.com/advanced/api.html#fedora-centos
systemctl enable flocker-control.service
systemctl enable flocker-control-agent.socket
systemctl enable flocker-control-api.socket

# Start listening for connections
systemctl start flocker-control-agent.socket
systemctl start flocker-control-api.socket

# Open up the firewall
# firewall-cmd --permanent --add-service flocker-control-api
# firewall-cmd --add-service flocker-control-api
# firewall-cmd --permanent --add-service flocker-control-agent
# firewall-cmd --add-service flocker-control-agent
EOF

# Transfer and run the remote provisioning script
scp "${REMOTE_PROVISIONING_SCRIPT_PATH}" "root@${FLOCKER_ACCEPTANCE_NODE}:${REMOTE_PROVISIONING_SCRIPT_PATH}"
ssh "root@${FLOCKER_ACCEPTANCE_NODE}" -- "sh ${REMOTE_PROVISIONING_SCRIPT_PATH}"

# Start the dataset agent
ssh "root@${FLOCKER_ACCEPTANCE_NODE}" -- flocker-dataset-agent \
    "${FLOCKER_ACCEPTANCE_AGENT_NODE}" \
    "${FLOCKER_ACCEPTANCE_CONTROL_NODE}" \
    > "/tmp/flocker-dataset-agent.$RANDOM.log" &

REMOTE_AGENT_PID="${!}"

FLOCKER_ACCEPTANCE_CONTROL_NODE="${FLOCKER_ACCEPTANCE_CONTROL_NODE}" \
FLOCKER_ACCEPTANCE_AGENT_NODES="${FLOCKER_ACCEPTANCE_AGENT_NODE}" \
# Run the dataset grow acceptance test instead.
trial flocker.acceptance.test_api.DatasetAPITests.test_dataset_deletion || echo "TEST FAILURE"

# Kill agent and wait for it to exit
echo "REMOTE_AGENT_PID: ${REMOTE_AGENT_PID}"
kill "${REMOTE_AGENT_PID}"
wait "${REMOTE_AGENT_PID}"
