#!/usr/bin/env python
# Copyright 2015 ClusterHQ Inc.  See LICENSE file for details.
"""
Check that published artifacts work.
"""
import os
import unittest

from admin.client import (
    DockerContainer, get_steps_pkg, get_steps_pip, run_steps
)


class TestPackages(unittest.TestCase):

    def setUp(self):
        self.longMessage = True

    def test_centos_7_rpm(self):
        """
        CentOS 7 client packaging works.

        Although CentOS 7 is not a supported client, the client packages
        get built, so it is installed here to test RPM packaging.
        """
        distribution = 'centos-7'
        steps = get_steps_pkg(distribution)
        container = DockerContainer.from_distribution(distribution)
        filename = '{}.out'.format(self.id())
        with open(filename, 'w') as out:
            status = run_steps(container, steps, out)
            self.assertEqual(
                status, 0,
                'Exit status = {}. See file {!r}'.format(status, filename))
        os.remove(filename)

    def test_ubuntu_14_04_deb(self):
        """
        Ubuntu 14.04 client packaging works.
        """
        distribution = 'ubuntu-14.04'
        steps = get_steps_pkg(distribution)
        container = DockerContainer.from_distribution(distribution)
        filename = '{}.out'.format(self.id())
        with open(filename, 'w') as out:
            status = run_steps(container, steps, out)
            self.assertEqual(
                status, 0,
                'Exit status = {}. See file {!r}'.format(status, filename))
        os.remove(filename)

    def test_ubuntu_15_04_deb(self):
        """
        Ubuntu 15.04 client packaging works.
        """
        distribution = 'ubuntu-15.04'
        steps = get_steps_pkg(distribution)
        container = DockerContainer.from_distribution(distribution)
        filename = '{}.out'.format(self.id())
        with open(filename, 'w') as out:
            status = run_steps(container, steps, out)
            self.assertEqual(
                status, 0,
                'Exit status = {}. See file {!r}'.format(status, filename))
        os.remove(filename)

    def test_pip_install_apt(self):
        """
        Pip client instructions work on an APT-based distribution.
        """
        distribution = 'debian-8'
        steps = get_steps_pip(distribution)
        container = DockerContainer.from_distribution(distribution)
        filename = '{}.out'.format(self.id())
        with open(filename, 'w') as out:
            status = run_steps(container, steps, out)
            self.assertEqual(
                status, 0,
                'Exit status = {}. See file {!r}'.format(status, filename))
        os.remove(filename)

    def test_pip_install_yum(self):
        """
        Pip client instructions work on a YUM-based distribution.
        """
        distribution = 'centos-7'
        steps = get_steps_pip(distribution)
        container = DockerContainer.from_distribution(distribution)
        filename = '{}.out'.format(self.id())
        with open(filename, 'w') as out:
            status = run_steps(container, steps, out)
            self.assertEqual(
                status, 0,
                'Exit status = {}. See file {!r}'.format(status, filename))
        os.remove(filename)

    def test_pip_install_dnf(self):
        """
        Pip client instructions work on a DNF-based distribution.
        """
        distribution = 'fedora-22'
        steps = get_steps_pip(distribution)
        container = DockerContainer.from_distribution(distribution)
        filename = '{}.out'.format(self.id())
        with open(filename, 'w') as out:
            status = run_steps(container, steps, out)
            self.assertEqual(
                status, 0,
                'Exit status = {}. See file {!r}'.format(status, filename))
        os.remove(filename)

if __name__ == '__main__':
    unittest.main()
