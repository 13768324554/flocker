"""
Test validation of keys generated by flocker-ca.
"""

from twisted.trial.unittest import TestCase
from twisted.internet.sslverify import PrivateCertificate
from twisted.internet.endpoints import SSL4ServerEndpoint
from twisted.internet import reactor

from ...testtools import find_free_port


def assert_validates(client_endpoint, server_endpoint):
    """
    Asserts that a TLS handshake is successfully established between the
    two endpoints.

    :return ``Deferred``: Fires on success.
    """


def assert_does_not_validate(client_endpoint, server_endpoint):
    """
    Assert that a TLS handshake is not established between the two
    endpoints.

    :return ``Deferred``: Fires on success (i.e. if no TLS handshake is
        established).
    """


def make_validation_test(validating_client_endpoint_fixture):
    """
    Create a ``TestCase`` for the validator of a specific certificate type.

    :param validating_client_endpoint_fixture: Create a client endpoint
         that implements the required validation.

    :return TestCase: Tests for given validator.
    """
    class ValidationTests(TestCase):
        """
        Tests to ensure correct validation of a specific type of certificate.
        """
        def server_endpoint(self, credential):
            """
            Create a non-validating server endpoint using the given
            certificate.

            :param FlockerCredential credential: The private key/certificate
                to use.

            :return: Server endpoint.
            """
            private_certificate = PrivateCertificate.fromCertificateAndKeyPair(
                credential.certificate, credential.credential.keypair.keypair)
            return SSL4ServerEndpoint(reactor, find_free_port(),
                                      private_certificate.options(),
                                      interface='127.0.0.1')

        def test_same_ca_correct_type(self):
            """
            If the expected certificate type is generated by the same CA
            then the validator will successfully validate it.
            """

        def test_different_ca_correct_type(self):
            """
            If the expected certificate type is generated by a different
            CA then the validator will reject it.
            """

        def test_same_ca_wrong_type(self):
            """
            If the expected certificate is generated by the same CA but is of
            the wrong type the validator will reject it.
            """

        def test_same_ca_another_wrong_type(self):
            """
            If the expected certificate is generated by the same CA but is of
            the wrong type the validator will reject it.

            This is different wrong type than ``test_same_ca_wrong_type``.
            """

    return ValidationTests
