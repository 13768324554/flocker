#!/bin/sh
set -ex

# These environment variables are required
: ${FLOCKER_ACCEPTANCE_CONTROL_NODE:?}
: ${FLOCKER_ACCEPTANCE_AGENT_NODES:?}

REPO="${RANDOM}"
DISTRIBUTION="fedora-20"

VERSION=$(python -c "import flocker, admin.release; print '-'.join(admin.release.make_rpm_version(flocker.__version__))")

REMOTE_PROVISIONING_SCRIPT_PATH="/tmp/run-api-tests.sh"

cat <<EOF > "${REMOTE_PROVISIONING_SCRIPT_PATH}"
set -ex

# Install repoquery and killall
yum install -y yum-utils psmisc python-virtualenv libffi-devel libssl-devel git
EOF


cat <<\EOF >> "${REMOTE_PROVISIONING_SCRIPT_PATH}"
# Unmount and remove lingering loopback devices
losetup --list --output back-file | grep "^/var/lib/flocker"| xargs --no-run-if-empty umount
losetup --list --output "name,back-file" | awk '/\/var\/lib\/flocker/ {print $1}' | xargs --no-run-if-empty losetup --detach
EOF

cat <<EOF >> "${REMOTE_PROVISIONING_SCRIPT_PATH}"
# Stop the agent
systemctl stop flocker-agent.service || true
systemctl disable flocker-agent.service || true

# Stop the control service
systemctl stop flocker-control-agent.socket || true
systemctl stop flocker-control-api.socket || true
systemctl stop flocker-control.service || true

systemctl disable flocker-control.service || true
systemctl disable flocker-control-agent.socket || true
systemctl disable flocker-control-api.socket || true

# Kill any lingering agent processes
killall --wait --regexp 'flocker-[^-]+-agent' 2>/dev/null || echo "NO RUNNING AGENTS FOUND" >&2

# Remove lingering docker containers
docker ps -q | xargs --no-run-if-empty docker stop
docker ps -aq | xargs --no-run-if-empty docker rm

# Remove lingering zfs datasets
zfs destroy -r flocker

# Remove existing packages
yum remove -y clusterhq-python-flocker || true

# Remove control service persisted configuration (if exists)
rm -rf /var/lib/flocker/current_configuration.v1.json

pushd /flocker
#
# Install packages
#
rpm -i clusterhq-python-flocker-${VERSION}.x86_64.rpm
rpm -i clusterhq-flocker-node-${VERSION}.noarch.rpm
popd

# Reload systemd configuration
systemctl daemon-reload

# Enable flocker-control and its sockets
# http://doc-dev.clusterhq.com/advanced/api.html#fedora-centos
systemctl enable flocker-control.service
systemctl enable flocker-control-agent.socket
systemctl enable flocker-control-api.socket

# Start listening for connections
systemctl start flocker-control-agent.socket
systemctl start flocker-control-api.socket

# Start the agent
systemctl enable flocker-agent.service
systemctl start flocker-agent.service

# Open up the firewall
firewall-cmd --permanent --add-service flocker-control-api
firewall-cmd --add-service flocker-control-api
firewall-cmd --permanent --add-service flocker-control-agent
firewall-cmd --add-service flocker-control-agent

systemctl restart docker
EOF

if [[ ! -e "clusterhq-python-flocker-${VERSION}.x86_64.rpm" ]]; then
    # Build packages on local machine
    ./admin/build-package --distribution fedora-20 $PWD
fi

# Transfer and run the remote provisioning script
nodes=""
for node in ${FLOCKER_ACCEPTANCE_AGENT_NODES}; do
    node_config_file="/tmp/flocker-agent.${node}"
    echo "FLOCKER_NODE_NAME = ${node}" > "${node_config_file}"
    echo "FLOCKER_CONTROL_NODE = ${FLOCKER_ACCEPTANCE_CONTROL_NODE}" >> "${node_config_file}"
    scp "${node_config_file}" "root@${node}:/etc/sysconfig/flocker-agent"

    scp "${REMOTE_PROVISIONING_SCRIPT_PATH}" "root@${node}:${REMOTE_PROVISIONING_SCRIPT_PATH}"
    ssh "root@${node}" -- "sh ${REMOTE_PROVISIONING_SCRIPT_PATH}"
    nodes="${nodes}${node}:"
done

# Start the dataset agent
# ssh "root@${FLOCKER_ACCEPTANCE_NODE}" -- flocker-dataset-agent \
#     "${FLOCKER_ACCEPTANCE_AGENT_NODES}" \
#     "${FLOCKER_ACCEPTANCE_CONTROL_NODE}" \
#     > "/tmp/flocker-dataset-agent.$RANDOM.log" &

# REMOTE_AGENT_PID="${!}"
export "FLOCKER_ACCEPTANCE_CONTROL_NODE"
export "FLOCKER_ACCEPTANCE_AGENT_NODES=${nodes}"

trial flocker.acceptance.test_api.DatasetAPITests || echo "TEST FAILURE"

# Kill agent and wait for it to exit
# echo "REMOTE_AGENT_PID: ${REMOTE_AGENT_PID}"
# kill "${REMOTE_AGENT_PID}"
# wait "${REMOTE_AGENT_PID}"
