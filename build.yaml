# To modify an existing job, simply update the jobs: dictionary
# commit, push
# Then click 'deploy' on the jenkins job related to this repository
# available on the jenkins homepage.

project: 'ClusterHQ/flocker'
git_url: 'https://github.com/ClusterHQ/flocker.git'

# common_cli contains YAML aliases for common cli operations
# used during the build process
common_cli:
  hashbang: &hashbang |
    #!/bin/bash
    set -x
    set -e

  cleanup: &cleanup |
    export PATH=/usr/local/bin:$PATH
    # clean up the stuff from previous runs
    sudo rm -rf venv
    sudo rm -f results.xml
    sudo rm -f trial.log
    sudo rm -rf _trial_temp/

  setup_venv: &setup_venv |
    # setup the new venv
    virtualenv -p python2.7 --clear venv
    . venv/bin/activate

  setup_pip_accel: &setup_pip_accel |
    # use S3 pip binary caching
    pip install "pip-accel[s3]"
    export PIP_ACCEL_S3_BUCKET=clusterhq-pip-accel
    # export the AWS secrets, so that pip-accel can connect to S3
    . /etc/boto.sh

  setup_pip_accel_centos7_vars: &setup_pip_accel_centos7_vars |
    export PIP_ACCEL_S3_PREFIX=centos-7

  setup_pip_accel_ubuntu_trusty_vars: &setup_pip_accel_ubuntu_trusty_vars |
    export PIP_ACCEL_S3_PREFIX=ubuntu-trusty-64

  setup_flocker_modules: &setup_flocker_modules |
    # install python modules from S3
    pip install pip-accel
    pip-accel install . --retries 15 --timeout 30 --disable-pip-version-check
    pip install pip-accel
    # the requirements include pip7.1, so we need to reinstall pip-accel
    pip-accel install Flocker[doc,dev,release] python-subunit junitxml --retries 15 --timeout 30 --disable-pip-version-check
    # pip-accel downgrades pip, but Our tests seem to require pip 7
    pip install --upgrade pip

  setup_aws_env_vars: &setup_aws_env_vars |
    # set vars and run tests
    export FLOCKER_FUNCTIONAL_TEST_CLOUD_CONFIG_FILE=/not-found/acceptance.yml
    export FLOCKER_FUNCTIONAL_TEST_AWS_AVAILABILITY_ZONE=us-west-2c
    export FLOCKER_FUNCTIONAL_TEST_CLOUD_PROVIDER=aws
    # need to unset the AWS secrets used by pip-accel
    unset AWS_ACCESS_KEY_ID
    unset AWS_SECRET_ACCESS_KEY

  setup_coverage: &setup_coverage |
    pip install pip-accel
    pip-accel install coverage==3.7.1 http://data.hybridcluster.net/python/coverage_reporter-0.01_hl0-py27-none-any.whl
    # pip-accel downgrades pip, but Our tests seem to require pip 7
    pip install --upgrade pip

  run_coverage: &run_coverage |
    coverage xml --include=flocker*

  convert_results_to_junit: &convert_results_to_junit |
    cat trial.log | subunit-1to2 | subunit2junitxml --no-passthrough --output-to=results.xml

  run_sphinx: &run_sphinx |
    python setup.py --version
    sphinx-build -d _build/doctree -b spelling . _build/spelling
    sphinx-build -d _build/doctree -b linkcheck . _build/linkcheck
    sphinx-build -d _build/doctree -b html . _build/html
    # upload html
    #link-release-documentation
    #upload-release-documentation

# the job definitions, they consume the aliases defined in the common_cli block
#
jobs:

  # http://build.clusterhq.com/builders/flocker-centos-7
  aws_flocker_centos_7_acceptance:
    label: 'aws-centos-7'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_centos7_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.acceptance 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_centos_7_ca_functional:
    label: 'aws-centos-7'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_centos7_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.ca.functional 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_centos_7_ca_test:
    label: 'aws-centos-7'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_centos7_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.ca.test 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_centos_7_cli:
    label: 'aws-centos-7'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_centos7_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.cli 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_centos_7_common:
    label: 'aws-centos-7'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_centos7_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.common 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_centos_7_control:
    label: 'aws-centos-7'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_centos7_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.control 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
# there's nothing to build for the flocker.docs module
#  aws_flocker_centos_7_docs:
#    label: 'aws-centos-7'
#    steps:
#      - { type: 'shell',
#           cli: [ *hashbang, *setup_pip_accel_centos7_vars,
#                  *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_aws_env_vars,
#            'trial --reporter=subunit flocker.docs 2>&1 | tee trial.log',
#            'cat trial.log | subunit-1to2 | subunit2junitxml --no-passthrough --output-to=results.xml']
#        }
  aws_flocker_centos_7_node:
    label: 'aws-centos-7'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_centos7_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.node.agents 2>&1 | tee -a trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_centos7_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.node.functional.test_deploy 2>&1 | tee -a trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
# flocker.node.functional is hanging, so we skip it here
#        - { type: 'shell',
#            cli: [ *hashbang, *setup_pip_accel_centos7_vars,
#                   *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_aws_env_vars,
#            'trial --reporter=subunit flocker.node.functional.test_docker 2>&1 | tee -a trial.log',
#            'cat trial.log | subunit-1to2 | subunit2junitxml --no-passthrough --output-to=results.xml']
#         }
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_centos7_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                'coverage run venv/bin/trial --reporter=subunit flocker.node.functional.test_script 2>&1 | tee -a trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_centos_7_provision:
    label: 'aws-centos-7'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_centos7_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.provision 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_centos_7_restapi:
    label: 'aws-centos-7'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_centos7_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.restapi 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_centos_7_route:
    label: 'aws-centos-7'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_centos7_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.route 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_centos_7_test:
    label: 'aws-centos-7'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_centos7_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.test 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_centos_7_testtools:
    label: 'aws-centos-7'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_centos7_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.test 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_centos_7_volume:
    label: 'aws-centos-7'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_centos7_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.volume 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }


# http://build.clusterhq.com/builders/flocker-admin
  aws_ubuntu_trusty_admin:
    label: 'aws-ubuntu-trusty'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_ubuntu_trusty_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit admin 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }


# http://build.clusterhq.com/builders/flocker-ubuntu-14.04
  aws_flocker_ubuntu_trusty_acceptance:
    label: 'aws-ubuntu-trusty'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_ubuntu_trusty_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.acceptance 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_ubuntu_trusty_ca_functional:
    label: 'aws-ubuntu-trusty'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_ubuntu_trusty_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.ca.functional 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_ubuntu_trusty_ca_test:
    label: 'aws-ubuntu-trusty'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_ubuntu_trusty_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.ca.test 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_ubuntu_trusty_cli:
    label: 'aws-ubuntu-trusty'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_ubuntu_trusty_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.cli 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_ubuntu_trusty_common:
    label: 'aws-ubuntu-trusty'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_ubuntu_trusty_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.common 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_ubuntu_trusty_control:
    label: 'aws-ubuntu-trusty'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_ubuntu_trusty_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.control 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
# there's nothing to build for the flocker.docs module
#  aws_flocker_ubuntu_trusty_docs:
#    label: 'aws-ubuntu-trusty'
#    steps:
#      - { type: 'shell',
#           cli: [ *hashbang, *setup_pip_accel_ubuntu_trusty_vars,
#                  *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_aws_env_vars,
#            'trial --reporter=subunit flocker.docs 2>&1 | tee trial.log',
#            'cat trial.log | subunit-1to2 | subunit2junitxml --no-passthrough --output-to=results.xml']
#        }
  aws_flocker_ubuntu_trusty_node:
    label: 'aws-ubuntu-trusty'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_ubuntu_trusty_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.node.agents 2>&1 | tee -a trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_ubuntu_trusty_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.node.functional.test_deploy 2>&1 | tee -a trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
# flocker.node.functional is hanging, so we skip it here
#        - { type: 'shell',
#            cli: [ *hashbang, *setup_pip_accel_ubuntu_trusty_vars,
#                   *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_aws_env_vars,
#            'trial --reporter=subunit flocker.node.functional.test_docker 2>&1 | tee -a trial.log',
#            'cat trial.log | subunit-1to2 | subunit2junitxml --no-passthrough --output-to=results.xml']
#         }
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_ubuntu_trusty_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                'coverage run venv/bin/trial --reporter=subunit flocker.node.functional.test_script 2>&1 | tee -a trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_ubuntu_trusty_provision:
    label: 'aws-ubuntu-trusty'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_ubuntu_trusty_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.provision 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_ubuntu_trusty_restapi:
    label: 'aws-ubuntu-trusty'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_ubuntu_trusty_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.restapi 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_ubuntu_trusty_route:
    label: 'aws-ubuntu-trusty'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_ubuntu_trusty_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.route 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_ubuntu_trusty_test:
    label: 'aws-ubuntu-trusty'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_ubuntu_trusty_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.test 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_ubuntu_trusty_testtools:
    label: 'aws-ubuntu-trusty'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_ubuntu_trusty_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.test 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }
  aws_flocker_ubuntu_trusty_volume:
    label: 'aws-ubuntu-trusty'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_ubuntu_trusty_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                 'coverage run venv/bin/trial --reporter=subunit flocker.volume 2>&1 | tee trial.log',
                 *run_coverage, *convert_results_to_junit ]
        }

  # http://build.clusterhq.com/builders/flocker-docs
  flocker_docs:
    label: 'aws-centos-7'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_centos7_vars,
                 *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_aws_env_vars,
                 *run_sphinx ]
        }
  # http://build.clusterhq.com/builders/flocker%2Facceptance%2Faws%2Fcentos-7%2Faws
  flocker_acceptance_aws_centos7:
    label: 'aws-centos-7'
    steps:
      - { type: 'shell',
          cli: [ *hashbang, *setup_pip_accel_centos7_vars,
             *cleanup, *setup_venv, *setup_pip_accel, *setup_flocker_modules, *setup_aws_env_vars,
             'venv/bin/python admin/run-acceptance-tests --distirbution centos-7 --provider aws --dataset-backent aws --branch \$BRANCH --build-server http://build.clusterhq.com --config-file $FLOCKER_FUNCTIONAL_TEST_CLOUD_CONFIG_FILE',
             *convert_results_to_junit ]
        }

